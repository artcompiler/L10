/* -*- mode: javascript; tab-width: 4; indent-tabs-mode: nil -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is [Open Source Virtual Machine.].
 *
 * The Initial Developer of the Original Code is
 * Adobe System Incorporated.
 * Portions created by the Initial Developer are Copyright (C) 2004-2006
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Adobe AS3 Team
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

use default namespace Ast,
    namespace Ast;

class Formatter {
    use default namespace internal, 
        namespace internal;

    var compact;

    public var pool;
    public function Formatter(pool) 
        : pool=pool { }

    public function format(nid=0) {
        if (nid === 0) {
            nid = pool.exprs.length-1   // last node is the root node
        }

        print("format() nid="+nid)

        let obj = pool[nid]

        if (obj is Serializable)
            return obj.serialize(this);

        if (obj is Array) 
            return formatArray(obj, true);

        if (obj is Number || obj is Boolean || obj is int || obj is uint || obj === null || obj === undefined)
            return String(obj);

        if (obj is String)
            return '"' + sanitize(obj) + '"';

        if (obj is Token::Tok)
            return '"' + obj + '"';

        throw new Error("Unserializable datum " + obj.constructor);
        return "[[" + obj + "]]";
    }

    function formatArray(obj, linebreak) {
        let s = "[";
        let separator = !compact && linebreak ? "\n," : ",";
        let lastWasOK = true;
        for ( let i=0, limit=obj.length ; i < limit ; i++ ) {
            lastWasOK = false;
            if (i > 0)
                s += separator;
            if (obj.hasOwnProperty(i)) {
                lastWasOK = true;
                s += format(obj[i]);
            }
        }
        if (!lastWasOK)
            s += separator;
        s += "]";
        return s;
    }

    function sanitize(s) {
        let r = "";
        let i = 0;
        let l = s.length;
        outer:
        while (i < l) {
            let start = i;
            while (i < l) {
                let c = s.charCodeAt(i);
                if (c < 32 || 
                    c == Char::BackSlash || 
                    c == Char::SingleQuote || 
                    c == Char::DoubleQuote ||
                    c == Char::UnicodePS ||
                    c == Char::UnicodeLS) {
                    r += s.substring(start, i);
                    s += uescape(c);
                    i++;
                    continue outer;
                }
                i++;
            }
            r += s.substring(start, i);
        }
        return r;
    }

    function uescape(c)
        "\\u" + (c+0x10000).toString(16).substring(1);

    public function sClass(obj, ...rest) {
        let sep0 = "\n, ";
        let sep1 = "\n, ";
        let s = "" + rest[0]
        for ( let i=1, limit=rest.length ; i < limit ; i++ ) {
            s += (i > 1 ? sep1 : sep0) + ' "' + rest[i] + '": ';
            s += format(obj[rest[i]]);
        }
        return s;
    }

    public function sConstant(expr)
        '{ "ast_constant": "' + expr + '" }';
}

// FIXME I:
// The unformatter uses 'eval' for three things:
//   - to decode the JSON input (dangerous)
//   - to create constructor functions for classes
//   - to look up global constant properties
//
// The latter two could be gotten rid of by using 
//
//    new Ast::[tag](...desc.map(decode))
//
// and
//
//    Ast::[constName]
//
// respectively (if the formatter cooperates; right now the
// constName expression is not a name so that wouldn't work), 
// but for that we need bracket syntax and splat to work.
//
// FIXME II:
// The function 'globalEval' should be removed and invocations
// of it should be replaced simply by 'global.eval', but that
// requires a working notion of 'global' in tamarin.

class Unformatter {
    use default namespace internal,
        namespace internal;

    public function unformatText(s) 
        decode(globalEval("(" + s + ")"));

    public function unformatObject(obj) 
        decode(obj);

    function decode(x) {
        if (x is Boolean || x is Number || x is int || x is uint || x is String)
            return x;

        if (x is Array) {
            for ( let i=0, limit=x.length ; i < limit ; i++ )
                if (x.hasOwnProperty(i))
                    x[i] = decode(x[i]);
            return x;
        }

        if (x.hasOwnProperty("ast_layout")) {
            let desc = x.ast_layout;
            let tag = desc[0];
            desc.shift(1);
            return (getConstructor(tag, desc.length)).apply(null, Util::map(function (n) { return decode(x[n]) }, desc));
        }

        if (x.hasOwnProperty("ast_constant"))
            return globalEval(x.ast_constant);

        let s = "{ ";
        for ( let n in x )
            if (x.hasOwnProperty(n))
                s += "'" + n + "': " + x[n];
        s += "}";
        throw new Error("Unknown datum type: object without a tag: " + s);
    }

    // A map from name to function that constructs instance of name.
    var constructors = {};

    function getConstructor(name, arity) {
        if (!constructors.hasOwnProperty(name)) {
            // FIXME: An array comprehension would be pretty here...
            let args = [];
            for ( let i=0 ; i < arity ; i++ )
                args.push("_p" + i);
            constructors[name] = globalEval("(function (" + args + ") { return new Ast::" + name + "(" + args + ") })");
        }
        return constructors[name];
    }

    function globalEval(s)
        ESC::evaluateInScopeArray([s], [], "");
}

