/* -*- mode: javascript; tab-width: 4; indent-tabs-mode: nil -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is [Open Source Virtual Machine.].
 *
 * The Initial Developer of the Original Code is
 * Adobe System Incorporated.
 * Portions created by the Initial Developer are Copyright (C) 2004-2006
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Adobe AS3 Team
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

class Renderer {
    use default namespace internal,
        namespace internal;

    var compact;

    function prefix() {
        return [ '<?xml version="1.0" standalone="no"?>'
               , '<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" '
               , '"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">'
               , '<svg viewBox="0 0 ' + (xMax+100) + ' ' + (yMax+100) + '"'
               , 'xmlns="http://www.w3.org/2000/svg" version="1.1" >'
               , '<text x="1" y="1" font-family="monospace" font-size="25" fill="blue" >'
               , '<defs>'
               , '<style type="text/css"><![CDATA['
               , 'tspan {'
               , '  fill: red;'
               , '}'
               , 'tspan .keyword {'
               , '  fill: brown;'
               , '}'
               , 'tspan .ident, tspan .Identifier, tspan .punc {'
               , '  fill: black;'
               , '}'
               , 'tspan .LiteralBoolean, tspan .LiteralInt {'
               , '  fill: teal;'
               , '}'
               , 'tspan .Fixture > tspan > tspan {'
               , '  fill: blue;'
               , '}'
               , ']]></style>'
               , '</defs>'
               ].join("\n")
    }

    function suffix() {
        return [ '\n</text></svg>'
               ].join("\n")
    }

    public var root
    var xMax = 0
    var yMax = 2000
    var xOffset = 0
    var yOffset = 25

    public function Renderer(root) 
        : root=root { 
    }

    public function render(node=null) {
        if (node===null) {
            let body = render(root)
            let str = ""
            str += prefix()
            str += body
            str += suffix()

            return str
        }

        if (node is Array) {
            let str = ""
            for (let i = 0; i < node.length; i++) {
                str += render(node[i])
            }
            return str
        }
        
        if (node is Number || 
            node is Boolean || 
            node is int || 
            node is uint || 
            node === null || 
            node === undefined) {
            let str = String(node);
            //print("Primitive str="+str)
            return str
        }

        if (node is String) {
            let str = sanitize(node);
            return str
        }

        //print("render() node.tag="+node.tag)

        let tagName = node.tag

        if (yOffset + Number(node.y) > this.yMax) {
            yOffset = 25-node.y
            xOffset += 1000
        }

        if (xOffset + Number(node.x) > this.xMax) {
            this.xMax = xOffset + Number(node.x) + 1500
            print("xMax="+xMax)
        }

        let attrs = ""
        for (let name in node) {
            if (name=="tag" || name=="elts") {
                continue
            }
            else if (name == "x") {
                attrs += " x='" + (xOffset + node.x + "'")
                continue
            }
            else if (name == "y") {
                attrs += " y='" + (yOffset + node.y + "'")
                continue
            }
            attrs += " " + name + "='" + node[name] + "'"
        }

        let elts = ""
        for (let i = 0; i < node.elts.length; i++) {
            elts += render(node.elts[i])
        }

        return "\n<" + tagName + " " + attrs + ">" + elts + "</" + tagName + ">"
    }

    function sanitize(s) {
        let r = "";
        let i = 0;
        let l = s.length;
        outer:
        while (i < l) {
            let start = i;
            while (i < l) {
                let c = s.charCodeAt(i);
                if (c < 32 ||
                    c == Char::BackSlash || 
//                    c == Char::SingleQuote || 
//                    c == Char::DoubleQuote ||
                    c == Char::UnicodePS ||
                    c == Char::UnicodeLS) {
                    r += s.substring(start, i);
                    r += uescape(c);
                    i++;
                    continue outer;
                }
                if (c == Char::Ampersand) {
                    r += s.substring(start, i);
                    r += "&amp;"
                    i++;
                    continue outer;
                }
                if (c == Char::LeftAngle) {
                    r += s.substring(start, i);
                    r += "&lt;"
                    i++;
                    continue outer;
                }
                i++;
            }
            r += s.substring(start, i);
        }
        return r;
    }

    function uescape(c)
        "\\u" + (c+0x10000).toString(16).substring(1);
}

