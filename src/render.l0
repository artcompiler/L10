/* -*- mode: javascript; tab-width: 4; indent-tabs-mode: nil -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is [Open Source Virtual Machine.].
 *
 * The Initial Developer of the Original Code is
 * Adobe System Incorporated.
 * Portions created by the Initial Developer are Copyright (C) 2004-2006
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Adobe AS3 Team
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

class Renderer {
    use default namespace internal,
        namespace internal;

    var compact;

    function prefix() {
        let xMax = xBreak * (numBreaks+1)
        let yMax = yBreak
        return [ '<?xml version="1.0" standalone="no"?>'
               , '<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" '
               , '"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">'
               , '<svg viewBox="0 0 ' + (xMax+10) + ' ' + (yMax+100) + '"'
               , 'onload="init(this)" '
               , 'xmlns:xlink="http://www.w3.org/1999/xlink"'
               , 'xmlns="http://www.w3.org/2000/svg"'
               , 'version="1.1">'
               , '<script xlink:href="jquery.js"></script>'
               , '<script>'
               , 'var xBreak = 500'
               , 'var yBreak = 1000'
               , 'var yFactor = ' + yFactor
               , 'var currentNode'
               , 'var currentLevel = 0'
               , 'function showNode(evt) {'
               , '  var node = evt.target'
               , '  var str = ""'
               , '  if (node==currentNode) {'
               , '    currentLevel++'
               , '  }'
               , '  else {'
               , '    currentLevel = 0'
               , '    currentNode = node'
               , '  }'
               , '  var n = 0'
               , '  while ("class" in node.attributes) {'
               , '    if (n != currentLevel) {'
               , '      node = node.parentNode; n++'
               , '      continue'
               , '    }'
               , '    var attrs = node.attributes'
               , '    var x = Number(attrs.xStart.value)'
               , '    var y = Number(attrs.yStart.value) - yFactor*0.65'
               , '    var x2 = Number(attrs.xStop.value)'
               , '    var y2 = Number(attrs.yStop.value) - yFactor*0.35'
               , '    drawBorder(x, y, x2, y2)'
               , '    str += attrs.class.value + " " + x + " " + y +'
               , '              " " + x2 + " " + y2 + "\\n"'
               , '    if (n == currentLevel) {'
               , '      break'
               , '    }'
               , '  }'
               , '  showStatus(node)'
               , '}'
               , 'function showStatus(node) {'
               , '  var attrs = node.attributes'
               , '  var statusText = Root.getElementById("statusText")'
               , '  while (statusText.firstChild) statusText.removeChild(statusText.firstChild)'
               , '  statusText.appendChild(document.createTextNode(attrs.id.value + " " + attrs.class.value))'
               , '}'
               , '<![CDATA['
               , 'var xmlns="http://www.w3.org/2000/svg"'
               , 'var Root=document.documentElement'
               , 'function drawBorder(x0, y0, x1, y1){'
               , '   var b = getBorder(x0, y0, x1, y1)'
               , '   for (var i = 0; i < b.length; i++) {'
               , '      x = b[i][0]'
               , '      y = b[i][1]'
               , '      w = b[i][2]'
               , '      h = b[i][3]'
               , '      var R=document.createElementNS(xmlns,"rect")'
               , '      R.setAttributeNS(null,"width",w)'
               , '      R.setAttributeNS(null,"height",h)'
               , '      R.setAttributeNS(null,"x",x)'
               , '      R.setAttributeNS(null,"y",y)'
               , '      R.setAttributeNS(null,"stroke","black")'
               , '      R.setAttributeNS(null,"fill", "yellow")'
               , '      R.setAttributeNS(null,"stroke-opacity", "0.0")'
               , '      R.setAttributeNS(null,"fill-opacity", "0.2")'
               , '      Root.removeChild(Root.firstChild)'
               , '      Root.insertBefore(R, Root.firstChild)'
               , '   }'
               , '}'
               , 'function getBorder(x0, y0, x1, y1) {'
               , '   var b = [ ]'
               , '   if (Math.floor((x1-1)/xBreak) - Math.floor((x0)/xBreak) > 0) {'
               , '       b.push([x0, y0, xBreak - x0 % xBreak, yBreak - y0])'
               , '       b.push([Math.floor(x1/xBreak)*xBreak, 0, xBreak, y1])'
               , '       if (Math.floor(x1/xBreak) - Math.floor(x0/xBreak) > 2) {'
               , '           b.push([x0+xBreak-x0%xBreak, 0, Math.floor(x1/xBreak)*xBreak-(x0+xBreak-x0%xBreak), yBreak])'
               , '       }'
               , '   }'
               , '   else {'
               , '       b.push([x0, y0, x1-x0, y1-y0])'
               , '   }'
               , '   return b'
               , '}'
               , 'function init(node) {'
               , '   $.getJSON("todos.js.notes", function(data) {'
               , '      for (var p in data) {'
               , '         drawDot(Root.getElementById(p))'
               , '         for each (var use in data[p].uses) {'
               , '             drawDot(Root.getElementById(use))'
               , '         }'
               , '      }'
               , '   })'
               , '}'
               , 'function drawDot(node) {'
               , '   var attrs = node.attributes'
               , '   var dot = document.createElementNS(xmlns, "circle")'
               , '   dot.setAttributeNS(null, "cx", attrs.xStart.value)'
               , '   dot.setAttributeNS(null, "cy", attrs.yStart.value)'
               , '   dot.setAttributeNS(null, "r", "10")'
               , '   dot.setAttributeNS(null,"fill", "red")'
               , '   dot.setAttributeNS(null,"fill-opacity", "0.99")'
               , '   Root.appendChild(dot)'
               , '}'
               , ']]>'
               , '</script>'
               , '<text id="statusText" x="10" y="1090" font-family="monospace" font-size="20" fill="blue">hello, world</text>'
               , '<text x="10" y="1" font-family="monospace" font-size="10" fill="blue" onclick="showNode(evt)" onmouseover="showStatus(evt.target)">'
               , '<defs>'
               , '<style type="text/css"><![CDATA['
               , 'tspan {'
               , '  fill: red;'
               , '}'
               , 'tspan .keyword {'
               , '  fill: brown;'
               , '}'
               , 'tspan .ident, tspan .Identifier, tspan .punc {'
               , '  fill: black;'
               , '}'
               , 'tspan .LiteralBoolean, tspan .LiteralInt {'
               , '  fill: teal;'
               , '}'
               , 'tspan .Fixture > tspan > tspan {'
               , '  fill: blue;'
               , '}'
               , ']]></style>'
               , '</defs>'
               ].join("\n")
    }

    function suffix() {
        return [ '\n</text></svg>'
               ].join("\n")
    }

    public var root
    const xFactor = 6
    const yFactor = 10

    public function Renderer(root) 
        : root=root { 
    }

    const xBreak = 500
    const yBreak = 1000
    var numBreaks
    function getOffsetPos(x, y) {
        numBreaks = Math.floor(y/yBreak)
        return [x + xBreak * numBreaks, yFactor + y % yBreak]
    }

    public function render(node=null) {
        if (node===null) {
            let body = render(root)
            let str = ""
            str += prefix()
            str += body
            str += suffix()
            return str
        }

        if (node is Array) {
            let str = ""
            for (let i = 0; i < node.length; i++) {
                str += render(node[i])
            }
            return str
        }
        
        if (node is Number || 
            node is Boolean || 
            node is int || 
            node is uint || 
            node === null || 
            node === undefined) {
            let str = String(node);
            //print("Primitive str="+str)
            return str
        }

        if (node is String) {
            let str = sanitize(node)
            return str
        }

        //print("render() node.tag="+node.tag)

        let tagName = node.tag

        let [xStart, yStart] = getOffsetPos(xFactor*(node.startCol), yFactor*(node.startLn))
        let [xStop, yStop] = getOffsetPos(xFactor*(node.stopCol), yFactor*(node.stopLn))

        yStop += xFactor
        if (yStop - yStart > xFactor) {
            xStart = Math.floor(xStart / xBreak) * xBreak
            xStop = Math.floor(xStop / xBreak + 1) * xBreak
        }

        let attrs = ""
        for (let name in node) {
            if (name=="tag" || name=="elts") {
                continue
            }
            else if (name == "startCol") {
                attrs += " x='" + xStart + "'"
                attrs += " xStart='" + xStart + "'"
                continue
            }
            else if (name == "startLn") {
                attrs += " y='" + yStart + "'"
                attrs += " yStart='" + yStart + "'"
                continue
            }
            else if (name == "stopCol") {
                attrs += " xStop='" + xStop + "'"
                continue
            }
            else if (name == "stopLn") {
                attrs += " yStop='" + yStop + "'"
                continue
            }
            attrs += " " + name + "='" + node[name] + "'"
        }

        print("attrs="+attrs)

        let elts = ""
        for (let i = 0; i < node.elts.length; i++) {
            elts += render(node.elts[i])
        }

        return "\n<" + tagName + " " + attrs + ">" + elts + "</" + tagName + ">"
    }

    function sanitize(s) {
        let r = "";
        let i = 0;
        let l = s.length;
        outer:
        while (i < l) {
            let start = i;
            while (i < l) {
                let c = s.charCodeAt(i);
                if (c < 32 ||
                    c == Char::BackSlash || 
//                    c == Char::SingleQuote || 
//                    c == Char::DoubleQuote ||
                    c == Char::UnicodePS ||
                    c == Char::UnicodeLS) {
                    r += s.substring(start, i);
                    r += uescape(c);
                    i++;
                    continue outer;
                }
                if (c == Char::Ampersand) {
                    r += s.substring(start, i);
                    r += "&amp;"
                    i++;
                    continue outer;
                }
                if (c == Char::LeftAngle) {
                    r += s.substring(start, i);
                    r += "&lt;"
                    i++;
                    continue outer;
                }
                i++;
            }
            r += s.substring(start, i);
        }
        return r
    }

    function uescape(c)
        "\\u" + (c+0x10000).toString(16).substring(1);
}

